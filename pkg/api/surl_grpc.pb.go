// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package surl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CreateClient is the client API for Create service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type createClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateClient(cc grpc.ClientConnInterface) CreateClient {
	return &createClient{cc}
}

func (c *createClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/surl.Create/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateServer is the server API for Create service.
// All implementations must embed UnimplementedCreateServer
// for forward compatibility
type CreateServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedCreateServer()
}

// UnimplementedCreateServer must be embedded to have forward compatible implementations.
type UnimplementedCreateServer struct {
}

func (UnimplementedCreateServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCreateServer) mustEmbedUnimplementedCreateServer() {}

// UnsafeCreateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateServer will
// result in compilation errors.
type UnsafeCreateServer interface {
	mustEmbedUnimplementedCreateServer()
}

func RegisterCreateServer(s grpc.ServiceRegistrar, srv CreateServer) {
	s.RegisterService(&Create_ServiceDesc, srv)
}

func _Create_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/surl.Create/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Create_ServiceDesc is the grpc.ServiceDesc for Create service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Create_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "surl.Create",
	HandlerType: (*CreateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Create_Add_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "surl.proto",
}

// GetClient is the client API for Get service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type getClient struct {
	cc grpc.ClientConnInterface
}

func NewGetClient(cc grpc.ClientConnInterface) GetClient {
	return &getClient{cc}
}

func (c *getClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/surl.Get/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetServer is the server API for Get service.
// All implementations must embed UnimplementedGetServer
// for forward compatibility
type GetServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedGetServer()
}

// UnimplementedGetServer must be embedded to have forward compatible implementations.
type UnimplementedGetServer struct {
}

func (UnimplementedGetServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGetServer) mustEmbedUnimplementedGetServer() {}

// UnsafeGetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetServer will
// result in compilation errors.
type UnsafeGetServer interface {
	mustEmbedUnimplementedGetServer()
}

func RegisterGetServer(s grpc.ServiceRegistrar, srv GetServer) {
	s.RegisterService(&Get_ServiceDesc, srv)
}

func _Get_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/surl.Get/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Get_ServiceDesc is the grpc.ServiceDesc for Get service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Get_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "surl.Get",
	HandlerType: (*GetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Get_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "surl.proto",
}
